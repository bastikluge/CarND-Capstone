img_edge_len  x_img  y_img  x_cam,          y_cam       z_cam          x_cam_scaled   y_cam_scaled
225           413    288    0,647188062312 -4,4659781   36,2714461335  0,01784290761 -0,12312655204
64            282    514   -3,8188576657   -4,55491578  120,601366324 -0,03166512770 -0,03776835967

Camera 3d -> 2d mapping model (see https://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html):
x_img = f_x * (x_cam / z_cam) + c_x
y_img = f_y * (y_cam / z_cam) + c_y

Solve:
------
c/z_cam = img_edge_len
c = img_edge_len * z_cam
  =  64 * 120,601366324 = 7718,487444736
  = 225 * 36,2714461335 = 8161,0753800375
  => use c = 8000 (to get a bigger img_edge_len in tendency)
  => img_edge_len = 8000 / z_cam

Solve:
------
x_img = f_x * (x_cam / z_cam) + c_x
f_x *  0,01784290761 + c_x = 413
f_x * -0,03166512770 + c_x = 282
=> f_x * (0,01784290761 + 0,03166512770) = 413 - 282
   f_x = 131 / 0,04950803531
       = 2646,0351169204981323667073226865
=> c_x = 413 - 2646,0351169204981323667073226865 * 0,01784290761
       = 365,78703987597200410900329060139
=> use f_x = 2646, c_x = 366 (sufficient accuracy)
=> x_img = 2646 * (x_cam / z_cam) + 366

Solve:
------
y_img = f_y * (y_cam / z_cam) + c_y
f_y * -0,03776835967 + c_y = 514
f_y * -0,12312655204 + c_y = 288
=> f_y * (-0,03776835967 + 0,12312655204) = 514 - 288
   f_y = 226 / 0,08535819237
       = 2647,6661902628339363461616379119
=> c_y = 514 - 2647,6661902628339363461616379119 * -0,03776835967
       = 613.99800...
=> use f_y = 2647, c_y = 614 (sufficient accuracy)
=> y_img = 2647 * (y_cam / z_cam) + 614
